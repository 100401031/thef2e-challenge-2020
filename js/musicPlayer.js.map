{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./source/js/musicPlayer.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","vm","player","window","onYouTubeIframeAPIReady","YT","Player","height","width","videoId","playerVars","controls","events","onReady","onPlayerReady","onStateChange","onPlayerStateChange","$","Vue","el","data","currentPlayList","playingPlayList","currentSong","isCued","isPlaying","isPause","isBuffering","isEnded","currentTime","durationTime","loadedFraction","playingTimer","loadingTimer","sidebarHide","playerState","screenWidth","body","clientWidth","listPauseHover","volume","preVolume","randomMode","randomPreviousSong","favoriteList","favoritePlaylist","title","song","playList","watch","newVal","this","PlayerState","CUED","PLAYING","PAUSED","ENDED","playNextSong","BUFFERING","setPlayerTimer","getDuration","clearPlayerTimer","oldVal","computed","cdRotate","playPercentage","parseFloat","toFixed","loadingPercentage","currentPlayListSong","isCurrentPlayFavorite","some","item","methods","getVolume","setVolume","e","target","muteVolume","event","setCurrentPlaylist","setCurrentSong","songObj","cueVideoById","playCurrentSong","setCdCoverImg","coverImgFileName","playVideo","push","playRandomSong","currentIndex","indexOf","length","playPreviousSong","preSongArrayLength","seekTo","splice","lastSongIndex","currentListLength","randomSongIndex","randomIndex","Math","floor","random","toggleRandomMode","imageName","style","getElementById","backgroundImage","getCurrentTime","getVideoLoadedFraction","setInterval","buffer","clearInterval","handleCollapse","changeCurrentTime","setTimeout","clearTimeout","handlePlayBtn","pauseVideo","addToFavorite","alreadyInList","find","index","favoriteListJson","JSON","stringify","localStorage","setItem","isListSongFavorite","filters","timeFormat","time","min","parseInt","sec","created","localFavoriteList","parse","getItem","getJSON","keys"],"mappings":"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","file":"musicPlayer.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","// This code loads the IFrame Player API code asynchronously.\nvar tag = document.createElement('script');\ntag.src = 'https://www.youtube.com/iframe_api';\nvar firstScriptTag = document.getElementsByTagName('script')[0];\nfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\nvar player = null;\nwindow.onYouTubeIframeAPIReady = function onYouTubeIframeAPIReady() {\n  player = new YT.Player('yt-iframe-player', {\n    height: '0',\n    width: '0',\n    videoId: 'H7pOrQEnc3c',\n    playerVars: { controls: 0 },\n    events: {\n      onReady: vm.onPlayerReady,\n      onStateChange: vm.onPlayerStateChange\n    }\n  });\n};\n\nvar vm;\n$(function () {\n  vm = new Vue({\n    el: '#app',\n    data: {\n      currentPlayList: {},\n      playingPlayList: null,\n      currentSong: null,\n      isCued: false,\n      isPlaying: false,\n      isPause: false,\n      isBuffering: false,\n      isEnded: false,\n      currentTime: 0,\n      durationTime: 0,\n      loadedFraction: 0,\n      playingTimer: null,\n      loadingTimer: null,\n      sidebarHide: false,\n      playerState: null,\n      screenWidth: document.body.clientWidth,\n      listPauseHover: false,\n      volume: 50,\n      preVolume: null,\n      randomMode: false,\n      randomPreviousSong: [],\n      favoriteList: [],\n      favoritePlaylist: {\n        title: '我的最愛',\n        song: []\n      },\n      playList: {\n        // '#pl-1': {\n        //   title: '周杰倫金曲',\n        //   song: [\n        //     {\n        //       title: '蝸牛',\n        //       artist: '周杰倫',\n        //       album: '范特西',\n        //       videoId: 'H7pOrQEnc3c',\n        //       coverImgFileName: 'jay_chou.jpg'\n        //     },\n        //     {\n        //       title: '世界末日',\n        //       artist: '周杰倫',\n        //       album: '范特西',\n        //       videoId: 'NDFULbHgL6E',\n        //       coverImgFileName: 'jay_chou.jpg'\n        //     },\n        //     {\n        //       title: '晴天',\n        //       artist: '周杰倫',\n        //       album: '葉惠美',\n        //       videoId: 'DYptgVvkVLQ',\n        //       coverImgFileName: 'jay_chou.jpg'\n        //     }\n        //   ]\n        // },\n        // '#pl-2': {\n        //   title: '張震嶽精選',\n        //   song: [\n        //     {\n        //       title: '思念是一種病',\n        //       artist: '張震嶽',\n        //       album: 'OK',\n        //       videoId: '9ei1PUmDz98',\n        //       coverImgFileName: 'Ayal_Komod.png'\n        //     },\n        //     {\n        //       title: '愛我別走',\n        //       artist: '張震嶽',\n        //       album: '秘密基地',\n        //       videoId: 'zPeMFCDPgKE',\n        //       coverImgFileName: 'Ayal_Komod.png'\n        //     },\n        //     {\n        //       title: '自由',\n        //       artist: '張震嶽',\n        //       album: '秘密基地',\n        //       videoId: '_dsyAjwf620',\n        //       coverImgFileName: 'Ayal_Komod.png'\n        //     }\n        //   ]\n        // }\n      }\n    },\n    watch: {\n      playerState(newVal) {\n        this.isBuffering = false;\n        this.isEnded = false;\n        this.isCued = false;\n        if (newVal == YT.PlayerState.CUED) {\n          this.isCued = true;\n        } else if (newVal == YT.PlayerState.PLAYING) {\n          this.isPlaying = true;\n          this.isPause = false;\n        } else if (newVal == YT.PlayerState.PAUSED) {\n          this.isPause = true;\n          this.isPlaying = false;\n        } else if (newVal == YT.PlayerState.ENDED) {\n          this.isEnded = true;\n          this.playNextSong();\n        } else if (newVal == YT.PlayerState.BUFFERING) {\n          this.isBuffering = true;\n        } else {\n          this.isPause = false;\n          this.isPlaying = false;\n        }\n      },\n      isPlaying(newVal) {\n        if (newVal) {\n          this.setPlayerTimer();\n          this.durationTime = player.getDuration();\n        } else {\n          this.clearPlayerTimer();\n        }\n      },\n      playingPlayList(newVal, oldVal) {\n        if (newVal != oldVal) {\n          this.randomPreviousSong = [];\n        }\n      }\n    },\n    computed: {\n      cdRotate() {\n        return (this.isPlaying || this.isPause) && !this.isEnded;\n      },\n      playPercentage() {\n        return parseFloat((this.currentTime / this.durationTime).toFixed(4)) || 0;\n      },\n      loadingPercentage() {\n        return parseFloat(this.loadedFraction.toFixed(3));\n      },\n      currentPlayListSong() {\n        return this.currentPlayList.song || [];\n      },\n      isCurrentPlayFavorite() {\n        if (this.currentSong)\n          return this.favoriteList.some(item => item.videoId == this.currentSong.videoId);\n        else return false;\n      }\n    },\n    methods: {\n      onPlayerReady() {\n        this.volume = player.getVolume();\n      },\n      setVolume(e) {\n        this.volume = e.target.value;\n        player.setVolume(this.volume);\n      },\n      muteVolume() {\n        if (this.volume > 0) {\n          this.preVolume = this.volume;\n          this.volume = 0;\n        } else if (this.volume < 1 && this.preVolume) {\n          this.volume = this.preVolume;\n          this.preVolume = null;\n        }\n        player.setVolume(this.volume);\n      },\n      onPlayerStateChange(event) {\n        this.playerState = event.data;\n      },\n      setCurrentPlaylist(key) {\n        if (key === 'favorite') {\n          this.currentPlayList = this.favoritePlaylist;\n          return;\n        }\n        this.currentPlayList = this.playList[key];\n      },\n      setCurrentSong(songObj) {\n        this.currentSong = songObj;\n        player.cueVideoById({\n          videoId: this.currentSong.videoId\n        });\n        this.currentTime = 0;\n        this.durationTime = 0;\n        this.loadedFraction = 0;\n      },\n      playCurrentSong(songObj) {\n        this.setCurrentSong(songObj);\n        this.setCdCoverImg(songObj.coverImgFileName);\n        this.playingPlayList = this.currentPlayList;\n        player.playVideo();\n      },\n      playNextSong() {\n        if (this.randomMode) {\n          //存取曾播放之歌曲讓使用者能播放上一首\n          this.randomPreviousSong.push(this.currentSong);\n          this.playRandomSong();\n          return;\n        }\n        //抓取現在索引值，確認是否為最後一首，處理true/false不同邏輯\n        const currentIndex = this.currentPlayList.song.indexOf(this.currentSong);\n        const currentListLength = this.currentPlayList.song.length;\n        if (currentIndex + 1 === currentListLength) {\n          //若為最後一首，則播放清單第一首\n          this.playCurrentSong(this.currentPlayList.song[0]);\n        } else {\n          this.playCurrentSong(this.currentPlayList.song[currentIndex + 1]);\n        }\n      },\n      playPreviousSong() {\n        if (this.randomMode) {\n          //若隨機播放紀錄無上一首則播放目前歌曲\n          const preSongArrayLength = this.randomPreviousSong.length;\n          if (preSongArrayLength === 0) {\n            player.seekTo(0);\n          } else {\n            //播放隨機播放紀錄上一首，並從陣列中將移除\n            this.playCurrentSong(this.randomPreviousSong[preSongArrayLength - 1]);\n            this.randomPreviousSong.splice(-1, 1);\n          }\n          return;\n        }\n        //抓取現在索引值，確認是否為第一首，處理true/false不同邏輯，並播放下一索引歌曲\n        const currentIndex = this.currentPlayList.song.indexOf(this.currentSong);\n        const lastSongIndex = this.currentPlayList.song.length - 1;\n        //若為第一首\n        if (currentIndex === 0) {\n          this.playCurrentSong(this.currentPlayList.song[lastSongIndex]);\n        } else {\n          this.playCurrentSong(this.currentPlayList.song[currentIndex - 1]);\n        }\n        // playCurrentSong();\n      },\n      playRandomSong() {\n        const currentIndex = this.currentPlayList.song.indexOf(this.currentSong);\n        const currentListLength = this.currentPlayList.song.length;\n        const randomSongIndex = () => {\n          let randomIndex = Math.floor(Math.random() * currentListLength);\n          if (randomIndex === currentIndex) return randomSongIndex();\n          else return randomIndex;\n        };\n        this.playCurrentSong(this.currentPlayList.song[randomSongIndex()]);\n      },\n      toggleRandomMode() {\n        this.randomMode = !this.randomMode;\n        this.randomPreviousSong = [];\n      },\n      setCdCoverImg(imageName) {\n        const style = `url('./image/MusicPlayer/albumCover/${imageName}')`;\n        document.getElementById('cd').style.backgroundImage = style;\n      },\n      setPlayerTimer() {\n        this.currentTime = player.getCurrentTime();\n        this.loadedFraction = player.getVideoLoadedFraction();\n        this.playingTimer = setInterval(() => {\n          if (!this.buffer) {\n            this.currentTime = player.getCurrentTime();\n          }\n        }, 1000 / 29);\n        this.loadingTimer = setInterval(() => {\n          this.loadedFraction = player.getVideoLoadedFraction();\n        }, 5000);\n      },\n      clearPlayerTimer() {\n        clearInterval(this.playingTimer);\n        clearInterval(this.loadingTimer);\n      },\n      handleCollapse() {\n        this.sidebarHide = !this.sidebarHide;\n      },\n      changeCurrentTime(e) {\n        this.buffer = setTimeout(() => {\n          clearTimeout(this.buffer);\n          this.buffer = null;\n        }, 1000);\n        this.currentTime = e.target.value;\n        player.seekTo(e.target.value);\n      },\n      handlePlayBtn() {\n        if (this.isPause || this.isEnded) {\n          player.playVideo();\n        } else {\n          player.pauseVideo();\n        }\n      },\n      addToFavorite(songObj) {\n        const alreadyInList = this.favoriteList.find(item => item.videoId == songObj.videoId);\n        if (alreadyInList) {\n          const index = this.favoriteList.indexOf(alreadyInList);\n          this.favoriteList.splice(index, 1);\n        } else {\n          this.favoriteList.push(songObj);\n        }\n        const favoriteListJson = JSON.stringify(this.favoriteList);\n        localStorage.setItem('favoriteList', favoriteListJson);\n      },\n      isListSongFavorite(songObj) {\n        return this.favoriteList.some(item => item.videoId == songObj.videoId);\n      }\n    },\n    filters: {\n      timeFormat(time) {\n        //將秒數轉換成mm:ss格式字串並回傳\n        let min = parseInt(time / 60) || 0;\n        let sec = parseInt(time) % 60 || 0;\n        return `${min}:${sec > 9 ? sec : '0' + sec}`;\n      }\n    },\n    created() {\n      const localFavoriteList = JSON.parse(localStorage.getItem('favoriteList')) || [];\n      this.favoriteList = localFavoriteList;\n      this.favoritePlaylist.song = this.favoriteList;\n      $.getJSON('./json/MusicPlayer/playlist.json', data => {\n        this.playList = data;\n        this.setCurrentPlaylist(Object.keys(this.playList)[0]);\n      });\n    }\n  });\n});\n"],"sourceRoot":""}