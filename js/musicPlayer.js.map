{"version":3,"sources":["musicPlayer.js"],"names":["tag","document","createElement","src","firstScriptTag","vm","player","YT","Player","height","onYouTubeIframeAPIReady","width","controls","videoId","playerVars","onPlayerReady","onPlayerStateChange","parentNode","insertBefore","$","Vue","el","currentPlayList","playingPlayList","currentSong","data","isCued","isPlaying","isPause","isBuffering","isEnded","currentTime","durationTime","loadedFraction","playingTimer","body","clientWidth","loadingTimer","sidebarHide","playerState","screenWidth","listPauseHover","volume","preVolume","watch","newVal","this","PlayerState","CUED","PLAYING","PAUSED","ENDED","BUFFERING","playNextSong","setPlayerTimer","getDuration","oldVal","clearPlayerTimer","randomPreviousSong","computed","cdRotate","parseFloat","toFixed","loadingPercentage","playPercentage","currentPlayListSong","song","isCurrentPlayFavorite","_this","some","item","methods","getVolume","setVolume","e","target","value","muteVolume","event","setCurrentPlaylist","key","playList","title","favoritePlaylist","songObj","playCurrentSong","coverImgFileName","randomMode","setCurrentSong","setCdCoverImg","indexOf","currentIndex","length","playRandomSong","playPreviousSong","preSongArrayLength","currentListLength","splice","lastSongIndex","Math","randomIndex","randomSongIndex","toggleRandomMode","getElementById","style","backgroundImage","getVideoLoadedFraction","setInterval","_this2","getCurrentTime","clearInterval","handleCollapse","changeCurrentTime","_this3","buffer","clearTimeout","seekTo","handlePlayBtn","pauseVideo","addToFavorite","index","favoriteList","find","alreadyInList","setTimeout","push","setItem","favoriteListJson","timeFormat","time","concat","created","localFavoriteList","getJSON","_this4","Object","keys"],"mappings":"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","file":"musicPlayer.js","sourcesContent":["// This code loads the IFrame Player API code asynchronously.\nvar tag = document.createElement('script');\ntag.src = 'https://www.youtube.com/iframe_api';\nvar firstScriptTag = document.getElementsByTagName('script')[0];\nfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\nvar player;\nfunction onYouTubeIframeAPIReady() {\n  player = new YT.Player('yt-iframe-player', {\n    height: '0',\n    width: '0',\n    videoId: 'H7pOrQEnc3c',\n    playerVars: { controls: 0 },\n    events: {\n      onReady: vm.onPlayerReady,\n      onStateChange: vm.onPlayerStateChange\n    }\n  });\n}\n\nvar vm;\n$(function () {\n  vm = new Vue({\n    el: '#app',\n    data: {\n      currentPlayList: {},\n      playingPlayList: null,\n      currentSong: null,\n      isCued: false,\n      isPlaying: false,\n      isPause: false,\n      isBuffering: false,\n      isEnded: false,\n      currentTime: 0,\n      durationTime: 0,\n      loadedFraction: 0,\n      playingTimer: null,\n      loadingTimer: null,\n      sidebarHide: false,\n      playerState: null,\n      screenWidth: document.body.clientWidth,\n      listPauseHover: false,\n      volume: 50,\n      preVolume: null,\n      randomMode: false,\n      randomPreviousSong: [],\n      favoriteList: [],\n      playList: {\n        // '#pl-1': {\n        //   title: '周杰倫金曲',\n        //   song: [\n        //     {\n        //       title: '蝸牛',\n        //       artist: '周杰倫',\n        //       album: '范特西',\n        //       videoId: 'H7pOrQEnc3c',\n        //       coverImgFileName: 'jay_chou.jpg'\n        //     },\n        //     {\n        //       title: '世界末日',\n        //       artist: '周杰倫',\n        //       album: '范特西',\n        //       videoId: 'NDFULbHgL6E',\n        //       coverImgFileName: 'jay_chou.jpg'\n        //     },\n        //     {\n        //       title: '晴天',\n        //       artist: '周杰倫',\n        //       album: '葉惠美',\n        //       videoId: 'DYptgVvkVLQ',\n        //       coverImgFileName: 'jay_chou.jpg'\n        //     }\n        //   ]\n        // },\n        // '#pl-2': {\n        //   title: '張震嶽精選',\n        //   song: [\n        //     {\n        //       title: '思念是一種病',\n        //       artist: '張震嶽',\n        //       album: 'OK',\n        //       videoId: '9ei1PUmDz98',\n        //       coverImgFileName: 'Ayal_Komod.png'\n        //     },\n        //     {\n        //       title: '愛我別走',\n        //       artist: '張震嶽',\n        //       album: '秘密基地',\n        //       videoId: 'zPeMFCDPgKE',\n        //       coverImgFileName: 'Ayal_Komod.png'\n        //     },\n        //     {\n        //       title: '自由',\n        //       artist: '張震嶽',\n        //       album: '秘密基地',\n        //       videoId: '_dsyAjwf620',\n        //       coverImgFileName: 'Ayal_Komod.png'\n        //     }\n        //   ]\n        // }\n      }\n    },\n    watch: {\n      playerState(newVal) {\n        this.isBuffering = false;\n        this.isEnded = false;\n        this.isCued = false;\n        if (newVal == YT.PlayerState.CUED) {\n          this.isCued = true;\n        } else if (newVal == YT.PlayerState.PLAYING) {\n          this.isPlaying = true;\n          this.isPause = false;\n        } else if (newVal == YT.PlayerState.PAUSED) {\n          this.isPause = true;\n          this.isPlaying = false;\n        } else if (newVal == YT.PlayerState.ENDED) {\n          this.isEnded = true;\n          this.playNextSong();\n        } else if (newVal == YT.PlayerState.BUFFERING) {\n          this.isBuffering = true;\n        } else {\n          this.isPause = false;\n          this.isPlaying = false;\n        }\n      },\n      isPlaying(newVal) {\n        if (newVal) {\n          this.setPlayerTimer();\n          this.durationTime = player.getDuration();\n        } else {\n          this.clearPlayerTimer();\n        }\n      },\n      playingPlayList(newVal, oldVal) {\n        if (newVal != oldVal) {\n          this.randomPreviousSong = [];\n        }\n      }\n    },\n    computed: {\n      cdRotate() {\n        return (this.isPlaying || this.isPause) && !this.isEnded;\n      },\n      playPercentage() {\n        return parseFloat((this.currentTime / this.durationTime).toFixed(4)) || 0;\n      },\n      loadingPercentage() {\n        return parseFloat(this.loadedFraction.toFixed(3));\n      },\n      currentPlayListSong() {\n        return this.currentPlayList.song || [];\n      },\n      isCurrentPlayFavorite() {\n        if (this.currentSong)\n          return this.favoriteList.some(item => item.videoId == this.currentSong.videoId);\n        else return false;\n      }\n    },\n    methods: {\n      onPlayerReady() {\n        this.volume = player.getVolume();\n      },\n      setVolume(e) {\n        this.volume = e.target.value;\n        player.setVolume(this.volume);\n      },\n      muteVolume() {\n        if (this.volume > 0) {\n          this.preVolume = this.volume;\n          this.volume = 0;\n        } else if (this.volume < 1 && this.preVolume) {\n          this.volume = this.preVolume;\n          this.preVolume = null;\n        }\n        player.setVolume(this.volume);\n      },\n      onPlayerStateChange(event) {\n        this.playerState = event.data;\n      },\n      setCurrentPlaylist(key) {\n        if (key === 'favorite') {\n          const favoritePlaylist = {\n            title: '我的最愛',\n            song: this.favoriteList\n          };\n          this.currentPlayList = favoritePlaylist;\n          return;\n        }\n        this.currentPlayList = this.playList[key];\n      },\n      setCurrentSong(songObj) {\n        this.currentSong = songObj;\n        player.cueVideoById({\n          videoId: this.currentSong.videoId\n        });\n        this.currentTime = 0;\n        this.durationTime = 0;\n        this.loadedFraction = 0;\n      },\n      playCurrentSong(songObj) {\n        this.setCurrentSong(songObj);\n        this.setCdCoverImg(songObj.coverImgFileName);\n        this.playingPlayList = this.currentPlayList;\n        player.playVideo();\n      },\n      playNextSong() {\n        if (this.randomMode) {\n          //存取曾播放之歌曲讓使用者能播放上一首\n          this.randomPreviousSong.push(this.currentSong);\n          this.playRandomSong();\n          return;\n        }\n        //抓取現在索引值，確認是否為最後一首，處理true/false不同邏輯\n        const currentIndex = this.currentPlayList.song.indexOf(this.currentSong);\n        const currentListLength = this.currentPlayList.song.length;\n        if (currentIndex + 1 === currentListLength) {\n          //若為最後一首，則播放清單第一首\n          this.playCurrentSong(this.currentPlayList.song[0]);\n        } else {\n          this.playCurrentSong(this.currentPlayList.song[currentIndex + 1]);\n        }\n      },\n      playPreviousSong() {\n        if (this.randomMode) {\n          //若隨機播放紀錄無上一首則播放目前歌曲\n          const preSongArrayLength = this.randomPreviousSong.length;\n          if (preSongArrayLength === 0) {\n            player.seekTo(0);\n          } else {\n            //播放隨機播放紀錄上一首，並從陣列中將移除\n            this.playCurrentSong(this.randomPreviousSong[preSongArrayLength - 1]);\n            this.randomPreviousSong.splice(-1, 1);\n          }\n          return;\n        }\n        //抓取現在索引值，確認是否為第一首，處理true/false不同邏輯，並播放下一索引歌曲\n        const currentIndex = this.currentPlayList.song.indexOf(this.currentSong);\n        const lastSongIndex = this.currentPlayList.song.length - 1;\n        //若為第一首\n        if (currentIndex === 0) {\n          this.playCurrentSong(this.currentPlayList.song[lastSongIndex]);\n        } else {\n          this.playCurrentSong(this.currentPlayList.song[currentIndex - 1]);\n        }\n        // playCurrentSong();\n      },\n      playRandomSong() {\n        const currentIndex = this.currentPlayList.song.indexOf(this.currentSong);\n        const currentListLength = this.currentPlayList.song.length;\n        const randomSongIndex = () => {\n          let randomIndex = Math.floor(Math.random() * currentListLength);\n          if (randomIndex === currentIndex) return randomSongIndex();\n          else return randomIndex;\n        };\n        this.playCurrentSong(this.currentPlayList.song[randomSongIndex()]);\n      },\n      toggleRandomMode() {\n        this.randomMode = !this.randomMode;\n        this.randomPreviousSong = [];\n      },\n      setCdCoverImg(imageName) {\n        const style = `url('../image/MusicPlayer/albumCover/${imageName}')`;\n        document.getElementById('cd').style.backgroundImage = style;\n      },\n      setPlayerTimer() {\n        this.currentTime = player.getCurrentTime();\n        this.loadedFraction = player.getVideoLoadedFraction();\n        this.playingTimer = setInterval(() => {\n          if (!this.buffer) {\n            this.currentTime = player.getCurrentTime();\n          }\n        }, 1000 / 29);\n        this.loadingTimer = setInterval(() => {\n          this.loadedFraction = player.getVideoLoadedFraction();\n        }, 5000);\n      },\n      clearPlayerTimer() {\n        clearInterval(this.playingTimer);\n        clearInterval(this.loadingTimer);\n      },\n      handleCollapse() {\n        this.sidebarHide = !this.sidebarHide;\n      },\n      changeCurrentTime(e) {\n        this.buffer = setTimeout(() => {\n          clearTimeout(this.buffer);\n          this.buffer = null;\n        }, 1000);\n        this.currentTime = e.target.value;\n        player.seekTo(e.target.value);\n      },\n      handlePlayBtn() {\n        if (this.isPause || this.isEnded) {\n          player.playVideo();\n        } else {\n          player.pauseVideo();\n        }\n      },\n      addToFavorite(songObj) {\n        const alreadyInList = this.favoriteList.find(item => item.videoId == songObj.videoId);\n        if (alreadyInList) {\n          const index = this.favoriteList.indexOf(alreadyInList);\n          this.favoriteList.splice(index, 1);\n        } else {\n          this.favoriteList.push(songObj);\n        }\n        const favoriteListJson = JSON.stringify(this.favoriteList);\n        localStorage.setItem('favoriteList', favoriteListJson);\n      },\n      isListSongFavorite(songObj) {\n        return this.favoriteList.some(item => item.videoId == songObj.videoId);\n      }\n    },\n    filters: {\n      timeFormat(time) {\n        //將秒數轉換成mm:ss格式字串並回傳\n        let min = parseInt(time / 60) || 0;\n        let sec = parseInt(time) % 60 || 0;\n        return `${min}:${sec > 9 ? sec : '0' + sec}`;\n      }\n    },\n    created() {\n      const localFavoriteList = JSON.parse(localStorage.getItem('favoriteList')) || [];\n      this.favoriteList = localFavoriteList;\n      $.getJSON('./json/MusicPlayer/playlist.json', data => {\n        this.playList = data;\n        this.setCurrentPlaylist(Object.keys(this.playList)[0]);\n      });\n    }\n  });\n});\n"]}