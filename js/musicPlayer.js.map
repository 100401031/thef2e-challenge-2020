{"version":3,"sources":["musicPlayer.js"],"names":["tag","document","createElement","src","parentNode","insertBefore","firstScriptTag","vm","window","player","YT","Player","onYouTubeIframeAPIReady","height","width","controls","videoId","playerVars","onPlayerReady","onPlayerStateChange","$","Vue","el","currentPlayList","playingPlayList","currentSong","data","isCued","isPlaying","isPause","isBuffering","isEnded","currentTime","durationTime","loadedFraction","playingTimer","body","clientWidth","loadingTimer","sidebarHide","playerState","screenWidth","listPauseHover","volume","preVolume","randomMode","randomPreviousSong","favoritePlaylist","watch","newVal","this","PlayerState","CUED","PLAYING","PAUSED","ENDED","BUFFERING","playNextSong","setPlayerTimer","getDuration","oldVal","clearPlayerTimer","computed","cdRotate","parseFloat","toFixed","loadingPercentage","playPercentage","currentPlayListSong","song","isCurrentPlayFavorite","_this","some","item","methods","getVolume","setVolume","e","target","value","muteVolume","event","setCurrentPlaylist","key","songObj","playCurrentSong","coverImgFileName","setCurrentSong","setCdCoverImg","indexOf","currentIndex","length","playRandomSong","playPreviousSong","preSongArrayLength","currentListLength","splice","lastSongIndex","Math","randomIndex","randomSongIndex","toggleRandomMode","getElementById","style","backgroundImage","getVideoLoadedFraction","setInterval","_this2","getCurrentTime","clearInterval","handleCollapse","changeCurrentTime","_this3","buffer","clearTimeout","seekTo","handlePlayBtn","pauseVideo","addToFavorite","index","favoriteList","find","alreadyInList","setTimeout","push","setItem","favoriteListJson","timeFormat","time","concat","created","localFavoriteList","getJSON","_this4","playList","Object","keys"],"mappings":"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","file":"musicPlayer.js","sourcesContent":["// This code loads the IFrame Player API code asynchronously.\nvar tag = document.createElement('script');\ntag.src = 'https://www.youtube.com/iframe_api';\nvar firstScriptTag = document.getElementsByTagName('script')[0];\nfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\nvar player = null;\nwindow.onYouTubeIframeAPIReady = function onYouTubeIframeAPIReady() {\n  player = new YT.Player('yt-iframe-player', {\n    height: '0',\n    width: '0',\n    videoId: 'H7pOrQEnc3c',\n    playerVars: { controls: 0 },\n    events: {\n      onReady: vm.onPlayerReady,\n      onStateChange: vm.onPlayerStateChange\n    }\n  });\n};\n\nvar vm;\n$(function () {\n  vm = new Vue({\n    el: '#app',\n    data: {\n      currentPlayList: {},\n      playingPlayList: null,\n      currentSong: null,\n      isCued: false,\n      isPlaying: false,\n      isPause: false,\n      isBuffering: false,\n      isEnded: false,\n      currentTime: 0,\n      durationTime: 0,\n      loadedFraction: 0,\n      playingTimer: null,\n      loadingTimer: null,\n      sidebarHide: false,\n      playerState: null,\n      screenWidth: document.body.clientWidth,\n      listPauseHover: false,\n      volume: 50,\n      preVolume: null,\n      randomMode: false,\n      randomPreviousSong: [],\n      favoriteList: [],\n      favoritePlaylist: {\n        title: '我的最愛',\n        song: []\n      },\n      playList: {\n        // '#pl-1': {\n        //   title: '周杰倫金曲',\n        //   song: [\n        //     {\n        //       title: '蝸牛',\n        //       artist: '周杰倫',\n        //       album: '范特西',\n        //       videoId: 'H7pOrQEnc3c',\n        //       coverImgFileName: 'jay_chou.jpg'\n        //     },\n        //     {\n        //       title: '世界末日',\n        //       artist: '周杰倫',\n        //       album: '范特西',\n        //       videoId: 'NDFULbHgL6E',\n        //       coverImgFileName: 'jay_chou.jpg'\n        //     },\n        //     {\n        //       title: '晴天',\n        //       artist: '周杰倫',\n        //       album: '葉惠美',\n        //       videoId: 'DYptgVvkVLQ',\n        //       coverImgFileName: 'jay_chou.jpg'\n        //     }\n        //   ]\n        // },\n        // '#pl-2': {\n        //   title: '張震嶽精選',\n        //   song: [\n        //     {\n        //       title: '思念是一種病',\n        //       artist: '張震嶽',\n        //       album: 'OK',\n        //       videoId: '9ei1PUmDz98',\n        //       coverImgFileName: 'Ayal_Komod.png'\n        //     },\n        //     {\n        //       title: '愛我別走',\n        //       artist: '張震嶽',\n        //       album: '秘密基地',\n        //       videoId: 'zPeMFCDPgKE',\n        //       coverImgFileName: 'Ayal_Komod.png'\n        //     },\n        //     {\n        //       title: '自由',\n        //       artist: '張震嶽',\n        //       album: '秘密基地',\n        //       videoId: '_dsyAjwf620',\n        //       coverImgFileName: 'Ayal_Komod.png'\n        //     }\n        //   ]\n        // }\n      }\n    },\n    watch: {\n      playerState(newVal) {\n        this.isBuffering = false;\n        this.isEnded = false;\n        this.isCued = false;\n        if (newVal == YT.PlayerState.CUED) {\n          this.isCued = true;\n        } else if (newVal == YT.PlayerState.PLAYING) {\n          this.isPlaying = true;\n          this.isPause = false;\n        } else if (newVal == YT.PlayerState.PAUSED) {\n          this.isPause = true;\n          this.isPlaying = false;\n        } else if (newVal == YT.PlayerState.ENDED) {\n          this.isEnded = true;\n          this.playNextSong();\n        } else if (newVal == YT.PlayerState.BUFFERING) {\n          this.isBuffering = true;\n        } else {\n          this.isPause = false;\n          this.isPlaying = false;\n        }\n      },\n      isPlaying(newVal) {\n        if (newVal) {\n          this.setPlayerTimer();\n          this.durationTime = player.getDuration();\n        } else {\n          this.clearPlayerTimer();\n        }\n      },\n      playingPlayList(newVal, oldVal) {\n        if (newVal != oldVal) {\n          this.randomPreviousSong = [];\n        }\n      }\n    },\n    computed: {\n      cdRotate() {\n        return (this.isPlaying || this.isPause) && !this.isEnded;\n      },\n      playPercentage() {\n        return parseFloat((this.currentTime / this.durationTime).toFixed(4)) || 0;\n      },\n      loadingPercentage() {\n        return parseFloat(this.loadedFraction.toFixed(3));\n      },\n      currentPlayListSong() {\n        return this.currentPlayList.song || [];\n      },\n      isCurrentPlayFavorite() {\n        if (this.currentSong)\n          return this.favoriteList.some(item => item.videoId == this.currentSong.videoId);\n        else return false;\n      }\n    },\n    methods: {\n      onPlayerReady() {\n        this.volume = player.getVolume();\n      },\n      setVolume(e) {\n        this.volume = e.target.value;\n        player.setVolume(this.volume);\n      },\n      muteVolume() {\n        if (this.volume > 0) {\n          this.preVolume = this.volume;\n          this.volume = 0;\n        } else if (this.volume < 1 && this.preVolume) {\n          this.volume = this.preVolume;\n          this.preVolume = null;\n        }\n        player.setVolume(this.volume);\n      },\n      onPlayerStateChange(event) {\n        this.playerState = event.data;\n      },\n      setCurrentPlaylist(key) {\n        if (key === 'favorite') {\n          this.currentPlayList = this.favoritePlaylist;\n          return;\n        }\n        this.currentPlayList = this.playList[key];\n      },\n      setCurrentSong(songObj) {\n        this.currentSong = songObj;\n        player.cueVideoById({\n          videoId: this.currentSong.videoId\n        });\n        this.currentTime = 0;\n        this.durationTime = 0;\n        this.loadedFraction = 0;\n      },\n      playCurrentSong(songObj) {\n        this.setCurrentSong(songObj);\n        this.setCdCoverImg(songObj.coverImgFileName);\n        this.playingPlayList = this.currentPlayList;\n        player.playVideo();\n      },\n      playNextSong() {\n        if (this.randomMode) {\n          //存取曾播放之歌曲讓使用者能播放上一首\n          this.randomPreviousSong.push(this.currentSong);\n          this.playRandomSong();\n          return;\n        }\n        //抓取現在索引值，確認是否為最後一首，處理true/false不同邏輯\n        const currentIndex = this.currentPlayList.song.indexOf(this.currentSong);\n        const currentListLength = this.currentPlayList.song.length;\n        if (currentIndex + 1 === currentListLength) {\n          //若為最後一首，則播放清單第一首\n          this.playCurrentSong(this.currentPlayList.song[0]);\n        } else {\n          this.playCurrentSong(this.currentPlayList.song[currentIndex + 1]);\n        }\n      },\n      playPreviousSong() {\n        if (this.randomMode) {\n          //若隨機播放紀錄無上一首則播放目前歌曲\n          const preSongArrayLength = this.randomPreviousSong.length;\n          if (preSongArrayLength === 0) {\n            player.seekTo(0);\n          } else {\n            //播放隨機播放紀錄上一首，並從陣列中將移除\n            this.playCurrentSong(this.randomPreviousSong[preSongArrayLength - 1]);\n            this.randomPreviousSong.splice(-1, 1);\n          }\n          return;\n        }\n        //抓取現在索引值，確認是否為第一首，處理true/false不同邏輯，並播放下一索引歌曲\n        const currentIndex = this.currentPlayList.song.indexOf(this.currentSong);\n        const lastSongIndex = this.currentPlayList.song.length - 1;\n        //若為第一首\n        if (currentIndex === 0) {\n          this.playCurrentSong(this.currentPlayList.song[lastSongIndex]);\n        } else {\n          this.playCurrentSong(this.currentPlayList.song[currentIndex - 1]);\n        }\n        // playCurrentSong();\n      },\n      playRandomSong() {\n        const currentIndex = this.currentPlayList.song.indexOf(this.currentSong);\n        const currentListLength = this.currentPlayList.song.length;\n        const randomSongIndex = () => {\n          let randomIndex = Math.floor(Math.random() * currentListLength);\n          if (randomIndex === currentIndex) return randomSongIndex();\n          else return randomIndex;\n        };\n        this.playCurrentSong(this.currentPlayList.song[randomSongIndex()]);\n      },\n      toggleRandomMode() {\n        this.randomMode = !this.randomMode;\n        this.randomPreviousSong = [];\n      },\n      setCdCoverImg(imageName) {\n        const style = `url('./image/MusicPlayer/albumCover/${imageName}')`;\n        document.getElementById('cd').style.backgroundImage = style;\n      },\n      setPlayerTimer() {\n        this.currentTime = player.getCurrentTime();\n        this.loadedFraction = player.getVideoLoadedFraction();\n        this.playingTimer = setInterval(() => {\n          if (!this.buffer) {\n            this.currentTime = player.getCurrentTime();\n          }\n        }, 1000 / 29);\n        this.loadingTimer = setInterval(() => {\n          this.loadedFraction = player.getVideoLoadedFraction();\n        }, 5000);\n      },\n      clearPlayerTimer() {\n        clearInterval(this.playingTimer);\n        clearInterval(this.loadingTimer);\n      },\n      handleCollapse() {\n        this.sidebarHide = !this.sidebarHide;\n      },\n      changeCurrentTime(e) {\n        this.buffer = setTimeout(() => {\n          clearTimeout(this.buffer);\n          this.buffer = null;\n        }, 1000);\n        this.currentTime = e.target.value;\n        player.seekTo(e.target.value);\n      },\n      handlePlayBtn() {\n        if (this.isPause || this.isEnded) {\n          player.playVideo();\n        } else {\n          player.pauseVideo();\n        }\n      },\n      addToFavorite(songObj) {\n        const alreadyInList = this.favoriteList.find(item => item.videoId == songObj.videoId);\n        if (alreadyInList) {\n          const index = this.favoriteList.indexOf(alreadyInList);\n          this.favoriteList.splice(index, 1);\n        } else {\n          this.favoriteList.push(songObj);\n        }\n        const favoriteListJson = JSON.stringify(this.favoriteList);\n        localStorage.setItem('favoriteList', favoriteListJson);\n      },\n      isListSongFavorite(songObj) {\n        return this.favoriteList.some(item => item.videoId == songObj.videoId);\n      }\n    },\n    filters: {\n      timeFormat(time) {\n        //將秒數轉換成mm:ss格式字串並回傳\n        let min = parseInt(time / 60) || 0;\n        let sec = parseInt(time) % 60 || 0;\n        return `${min}:${sec > 9 ? sec : '0' + sec}`;\n      }\n    },\n    created() {\n      const localFavoriteList = JSON.parse(localStorage.getItem('favoriteList')) || [];\n      this.favoriteList = localFavoriteList;\n      this.favoritePlaylist.song = this.favoriteList;\n      $.getJSON('./json/MusicPlayer/playlist.json', data => {\n        this.playList = data;\n        this.setCurrentPlaylist(Object.keys(this.playList)[0]);\n      });\n    }\n  });\n});\n"]}