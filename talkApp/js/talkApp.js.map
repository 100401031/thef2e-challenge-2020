{"version":3,"sources":["talkApp/js/talkApp.js"],"names":["vm","Vue","el","data","inputLang","currentGroup","msgRecognizing","msgRecording","autoSend","tempMsg","text","audioBlob","audioDuration","id","title","messages","groups","Audio","play","computed","watch","reverse","methods","recordFn","start","navigator","mediaDevices","getUserMedia","audio","then","stream","_this","mediaRecorder","MediaRecorder","startTime","Date","now","audioChunks","addEventListener","event","push","stopTime","Blob","createObjectURL","audioUrl","sendMsg","end","this","SpeechRecognition","webkitSpeechRecognition","recognition","webkitSpeechGrammarList","webkitSpeechRecognitionEvent","continuous","record","inputRecognition","onstart","SpeechRecognitionEvent","commandRecognition","interimResults","lang","interim_transcript","i","resultIndex","results","length","isFinal","transcript","final_transcript","stop","SpeechGrammarList","grammar","speechRecognitionList","addFromString","grammars","maxAlternatives","onend","commands","last","includes","console","inputGroup","command","replace","trim","index","parseInt","group","item","toLowerCase","switchGroup","e","msg","arguments","undefined","timestamp","created","find","filters","timeFormat","date","month","getMonth","day","getDate","hours","getHours","getMinutes","getSeconds","concat","substr","minutes"],"mappings":"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","file":"talkApp.js","sourcesContent":["var vm;\nvm = new Vue({\n  el: '#app',\n  data: {\n    inputLang: 'en-US',\n    currentGroup: {},\n    msgRecognizing: false,\n    msgRecording: false,\n    autoSend: false,\n    tempMsg: {\n      text: '',\n      audioBlob: null,\n      audioUrl: null,\n      audioDuration: null,\n    },\n    groups: [\n      { id: '#1', title: '101 Airborne Division', messages: [] },\n      { id: '#2', title: 'Easy Company', messages: [] },\n    ],\n  },\n  watch: {\n    currentGroup() {\n      const audio = new Audio('./sound/channel.mp3');\n      audio.play();\n    },\n  },\n  computed: {\n    messages() {\n      return this.currentGroup.messages.reverse();\n    },\n  },\n  methods: {\n    recordFn() {\n      return {\n        mediaRecorder: null,\n        start: function () {\n          vm.msgRecording = true;\n          navigator.mediaDevices\n            .getUserMedia({ audio: true })\n            .then((stream) => {\n              this.mediaRecorder = new MediaRecorder(stream);\n              this.mediaRecorder.start();\n              const startTime = Date.now();\n              const audioChunks = [];\n              this.mediaRecorder.addEventListener('dataavailable', (event) => {\n                audioChunks.push(event.data);\n              });\n              this.mediaRecorder.addEventListener('stop', () => {\n                const stopTime = Date.now();\n                vm.tempMsg.audioDuration = stopTime - startTime;\n                const audioBlob = new Blob(audioChunks);\n                const audioUrl = URL.createObjectURL(audioBlob);\n                vm.tempMsg.audioBlob = audioBlob;\n                vm.tempMsg.audioUrl = audioUrl;\n                if (vm.autoSend) {\n                  vm.sendMsg();\n                }\n              });\n            });\n        },\n        end: function () {\n          this.mediaRecorder.stop();\n          vm.msgRecording = false;\n        },\n      };\n    },\n    inputRecognition() {\n      const vm = this;\n      //辨識初始設定\n      const SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;\n      const SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;\n      const SpeechRecognitionEvent =\n        SpeechRecognitionEvent || webkitSpeechRecognitionEvent;\n      const recognition = new SpeechRecognition();\n      recognition.continuous = true; // 連續辨識\n      recognition.interimResults = true; // 是否要輸出中間結果\n      recognition.lang = this.inputLang;\n      //錄音初始設定\n      const record = this.recordFn();\n      // 開始辨識及錄音\n      recognition.start();\n      recognition.onstart = function () {\n        record.start();\n        vm.msgRecognizing = true; // 設定為辨識中\n      };\n      recognition.onend = function () {\n        // 辨識完成\n        record.end();\n        vm.commandRecognition();\n        vm.msgRecognizing = false; // 設定為「非辨識中」\n      };\n      recognition.onresult = function (event) {\n        let interim_transcript = ''; // 中間結果\n        let final_transcript = '';\n        for (let i = event.resultIndex; i < event.results.length; ++i) {\n          // 對於每一個辨識結果\n          if (event.results[i].isFinal) {\n            // 如果是最終結果\n            final_transcript += event.results[i][0].transcript; // 將其加入最終結果中\n            vm.tempMsg.text = final_transcript;\n            recognition.stop();\n          } else {\n            // 否則\n            interim_transcript += event.results[i][0].transcript; // 將其加入中間結果中\n            vm.tempMsg.text = interim_transcript;\n          }\n        }\n      };\n    },\n    commandRecognition() {\n      const vm = this;\n      const SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;\n      const SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;\n      const SpeechRecognitionEvent =\n        SpeechRecognitionEvent || webkitSpeechRecognitionEvent;\n      const commands = ['switch to'];\n      var grammar =\n        '#JSGF V1.0; grammar commands; public <commands> = ' +\n        commands.join(' | ') +\n        ' ;';\n      const recognition = new SpeechRecognition();\n      const speechRecognitionList = new SpeechGrammarList();\n      speechRecognitionList.addFromString(grammar, 1);\n      recognition.grammars = speechRecognitionList;\n      recognition.lang = 'en-US';\n      recognition.continuous = true; // 連續辨識\n      recognition.interimResults = false; // 是否要輸出中間結果\n      recognition.maxAlternatives = 1;\n      recognition.start();\n      recognition.onend = function () {\n        console.log('commandRecognition End');\n        setTimeout(() => {\n          if (!vm.msgRecording) {\n            console.log('commandRecognition');\n            vm.commandRecognition();\n          }\n        }, 50);\n      };\n      recognition.onresult = function (event) {\n        //不在錄音的情況下執行\n        if (!vm.msgRecognizing) {\n          const last = event.results.length - 1;\n          const command = event.results[last][0].transcript;\n          console.log(\n            command.toLowerCase() +\n              ' Confidence: ' +\n              event.results[0][0].confidence\n          );\n          if (command.toLowerCase().includes('switch to')) {\n            switchGroup(command.toLowerCase());\n          }\n        }\n      };\n      function switchGroup(command) {\n        let group;\n        if (command.includes('channel')) {\n          const inputGroup = command.replace('switch to channel', '').trim();\n          const index = parseInt(inputGroup, 10) - 1;\n          group = vm.groups[index];\n        } else {\n          const inputGroup = command.replace('switch to', '').trim();\n          if (inputGroup == vm.currentGroup.title) return;\n          group = vm.groups.find(\n            (item) => item.title.toLowerCase() == inputGroup\n          );\n        }\n        if (group && vm.currentGroup !== group) {\n          vm.currentGroup = group;\n        }\n      }\n    },\n    sendMsg(e, msg = this.tempMsg) {\n      if (!msg.text.length && !msg.audioUrl) return;\n      msg.timestamp = Date.now();\n      this.currentGroup.messages.push(msg);\n      this.tempMsg = {\n        text: '',\n        audioBlob: null,\n        audioUrl: null,\n        audioDuration: null,\n      };\n    },\n  },\n  created() {\n    this.currentGroup = this.groups[0];\n    this.commandRecognition();\n  },\n  filters: {\n    timeFormat(timestamp) {\n      let date = new Date(timestamp);\n      let year = date.getFullYear();\n      let month = date.getMonth() + 1;\n      let day = date.getDate();\n      let hours = '0' + date.getHours();\n      let minutes = '0' + date.getMinutes();\n      let seconds = '0' + date.getSeconds();\n      return `${year}-${month}-${day} ${hours.substr(-2)}:${minutes.substr(\n        -2\n      )}:${seconds.substr(-2)}`;\n    },\n  },\n});\n"]}