{"version":3,"sources":["talkApp/js/talkApp.js"],"names":["vm","Vue","el","data","currentGroup","msgRecognizing","msgRecording","autoSend","tempMsg","text","audioBlob","audioDuration","id","title","messages","groups","this","reverse","methods","recordFn","computed","start","navigator","mediaDevices","getUserMedia","audio","then","stream","_this","mediaRecorder","MediaRecorder","startTime","Date","now","addEventListener","event","audioChunks","push","stopTime","Blob","URL","createObjectURL","end","stop","inputRecognition","SpeechRecognition","webkitSpeechRecognition","recognition","webkitSpeechGrammarList","webkitSpeechRecognitionEvent","continuous","interimResults","lang","record","onstart","onend","SpeechGrammarList","SpeechRecognitionEvent","onresult","final_transcript","i","resultIndex","results","length","transcript","interim_transcript","grammar","join","speechRecognitionList","grammars","setTimeout","commandRecognition","commands","last","toLowerCase","group","inputGroup","command","replace","trim","maxAlternatives","index","console","find","item","log","sendMsg","e","msg","arguments","undefined","audioUrl","timestamp","created","switchGroup","filters","timeFormat","date","year","parseInt","day","getDate","hours","minutes","getMinutes","seconds","getSeconds","substr"],"mappings":"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","file":"talkApp.js","sourcesContent":["var vm;\nvm = new Vue({\n  el: '#app',\n  data: {\n    currentGroup: {},\n    msgRecognizing: false,\n    msgRecording: false,\n    autoSend: false,\n    tempMsg: {\n      text: null,\n      audioBlob: null,\n      audioUrl: null,\n      audioDuration: null\n    },\n    groups: [\n      { id: '#1', title: '101 Airborne Division', messages: [] },\n      { id: '#2', title: 'Easy Company', messages: [] }\n    ]\n  },\n  computed: {\n    messages() {\n      return this.currentGroup.messages.reverse();\n    }\n  },\n  methods: {\n    recordFn() {\n      return {\n        mediaRecorder: null,\n        start: function () {\n          vm.msgRecording = true;\n          navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n            this.mediaRecorder = new MediaRecorder(stream);\n            this.mediaRecorder.start();\n            const startTime = Date.now();\n            const audioChunks = [];\n            this.mediaRecorder.addEventListener('dataavailable', event => {\n              audioChunks.push(event.data);\n            });\n            this.mediaRecorder.addEventListener('stop', () => {\n              const stopTime = Date.now();\n              vm.tempMsg.audioDuration = stopTime - startTime;\n              const audioBlob = new Blob(audioChunks);\n              const audioUrl = URL.createObjectURL(audioBlob);\n              vm.tempMsg.audioBlob = audioBlob;\n              vm.tempMsg.audioUrl = audioUrl;\n              if (vm.autoSend) {\n                vm.sendMsg();\n              }\n            });\n          });\n        },\n        end: function () {\n          this.mediaRecorder.stop();\n          vm.msgRecording = false;\n        }\n      };\n    },\n    inputRecognition() {\n      const vm = this;\n      //辨識初始設定\n      const SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;\n      const SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;\n      const SpeechRecognitionEvent = SpeechRecognitionEvent || webkitSpeechRecognitionEvent;\n      const recognition = new SpeechRecognition();\n      recognition.continuous = true; // 連續辨識\n      recognition.interimResults = true; // 是否要輸出中間結果\n      recognition.lang = 'en-US';\n      //錄音初始設定\n      const record = this.recordFn();\n      // 開始辨識及錄音\n      recognition.start();\n      recognition.onstart = function () {\n        record.start();\n        vm.msgRecognizing = true; // 設定為辨識中\n      };\n      recognition.onend = function () {\n        // 辨識完成\n        record.end();\n        vm.commandRecognition();\n        vm.msgRecognizing = false; // 設定為「非辨識中」\n      };\n      recognition.onresult = function (event) {\n        let interim_transcript = ''; // 中間結果\n        let final_transcript = '';\n        for (let i = event.resultIndex; i < event.results.length; ++i) {\n          // 對於每一個辨識結果\n          if (event.results[i].isFinal) {\n            // 如果是最終結果\n            final_transcript += event.results[i][0].transcript; // 將其加入最終結果中\n            vm.tempMsg.text = final_transcript;\n            recognition.stop();\n          } else {\n            // 否則\n            interim_transcript += event.results[i][0].transcript; // 將其加入中間結果中\n            vm.tempMsg.text = interim_transcript;\n          }\n        }\n      };\n    },\n    commandRecognition() {\n      const vm = this;\n      const SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;\n      const SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;\n      const SpeechRecognitionEvent = SpeechRecognitionEvent || webkitSpeechRecognitionEvent;\n      const commands = ['switch to'];\n      var grammar =\n        '#JSGF V1.0; grammar commands; public <commands> = ' + commands.join(' | ') + ' ;';\n      const recognition = new SpeechRecognition();\n      const speechRecognitionList = new SpeechGrammarList();\n      speechRecognitionList.addFromString(grammar, 1);\n      recognition.grammars = speechRecognitionList;\n      recognition.lang = 'en-US';\n      recognition.continuous = true; // 連續辨識\n      recognition.interimResults = false; // 是否要輸出中間結果\n      recognition.maxAlternatives = 1;\n      recognition.start();\n      recognition.onend = function () {\n        console.log('commandRecognition End');\n        setTimeout(() => {\n          if (!vm.msgRecording) {\n            console.log('commandRecognition');\n            vm.commandRecognition();\n          }\n        }, 50);\n      };\n      recognition.onresult = function (event) {\n        //不在錄音的情況下執行\n        if (!vm.msgRecognizing) {\n          const last = event.results.length - 1;\n          const command = event.results[last][0].transcript;\n          console.log(command.toLowerCase() + ' Confidence: ' + event.results[0][0].confidence);\n          if (command.toLowerCase().includes('switch to')) {\n            switchGroup(command.toLowerCase());\n          }\n        }\n      };\n      function switchGroup(command) {\n        let group;\n        if (command.includes('channel')) {\n          const inputGroup = command.replace('switch to channel', '').trim();\n          const index = parseInt(inputGroup, 10) - 1;\n          group = vm.groups[index];\n        } else {\n          const inputGroup = command.replace('switch to', '').trim();\n          if (inputGroup == vm.currentGroup.title) return;\n          group = vm.groups.find(item => item.title.toLowerCase() == inputGroup);\n        }\n        if (group && vm.currentGroup !== group) {\n          vm.currentGroup = group;\n        }\n      }\n    },\n    sendMsg(e, msg = this.tempMsg) {\n      if (!msg.text.length && !msg.audioUrl) return;\n      msg.timestamp = Date.now();\n      this.currentGroup.messages.push(msg);\n      this.tempMsg = {\n        text: null,\n        audioBlob: null,\n        audioUrl: null,\n        audioDuration: null\n      };\n    }\n  },\n  created() {\n    this.commandRecognition();\n    this.currentGroup = this.groups[0];\n  },\n  filters: {\n    timeFormat(timestamp) {\n      let date = new Date(timestamp);\n      let year = date.getFullYear();\n      let month = date.getMonth() + 1;\n      let day = date.getDate();\n      let hours = '0' + date.getHours();\n      let minutes = '0' + date.getMinutes();\n      let seconds = '0' + date.getSeconds();\n      return `${year}-${month}-${day} ${hours.substr(-2)}:${minutes.substr(-2)}:${seconds.substr(\n        -2\n      )}`;\n    }\n  }\n});\n"]}