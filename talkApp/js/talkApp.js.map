{"version":3,"sources":["talkApp/js/talkApp.js"],"names":["vm","Vue","el","data","inputLang","currentGroup","msgRecognizing","msgRecording","autoSend","tempMsg","text","audioBlob","audioDuration","id","title","messages","groups","Audio","play","computed","watch","reverse","methods","recordFn","start","navigator","mediaDevices","getUserMedia","audio","then","stream","_this","mediaRecorder","MediaRecorder","startTime","Date","now","addEventListener","event","audioChunks","push","stopTime","Blob","URL","createObjectURL","end","this","stop","inputRecognition","SpeechRecognition","webkitSpeechRecognition","recognition","webkitSpeechGrammarList","webkitSpeechRecognitionEvent","continuous","interimResults","lang","record","onstart","onend","SpeechGrammarList","SpeechRecognitionEvent","onresult","final_transcript","i","resultIndex","results","length","transcript","interim_transcript","grammar","join","speechRecognitionList","grammars","setTimeout","commandRecognition","commands","last","toLowerCase","group","inputGroup","command","replace","trim","maxAlternatives","index","console","find","item","log","sendMsg","e","msg","arguments","undefined","audioUrl","timestamp","created","filters","timeFormat","date","year","parseInt","day","getDate","hours","minutes","getMinutes","seconds","getSeconds","substr"],"mappings":"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","file":"talkApp.js","sourcesContent":["var vm;\nvm = new Vue({\n  el: '#app',\n  data: {\n    inputLang: 'en-US',\n    currentGroup: {},\n    msgRecognizing: false,\n    msgRecording: false,\n    autoSend: false,\n    tempMsg: {\n      text: null,\n      audioBlob: null,\n      audioUrl: null,\n      audioDuration: null\n    },\n    groups: [\n      { id: '#1', title: '101 Airborne Division', messages: [] },\n      { id: '#2', title: 'Easy Company', messages: [] }\n    ]\n  },\n  watch: {\n    currentGroup() {\n      const audio = new Audio('./sound/channel.mp3');\n      audio.play();\n    }\n  },\n  computed: {\n    messages() {\n      return this.currentGroup.messages.reverse();\n    }\n  },\n  methods: {\n    recordFn() {\n      return {\n        mediaRecorder: null,\n        start: function () {\n          vm.msgRecording = true;\n          navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n            this.mediaRecorder = new MediaRecorder(stream);\n            this.mediaRecorder.start();\n            const startTime = Date.now();\n            const audioChunks = [];\n            this.mediaRecorder.addEventListener('dataavailable', event => {\n              audioChunks.push(event.data);\n            });\n            this.mediaRecorder.addEventListener('stop', () => {\n              const stopTime = Date.now();\n              vm.tempMsg.audioDuration = stopTime - startTime;\n              const audioBlob = new Blob(audioChunks);\n              const audioUrl = URL.createObjectURL(audioBlob);\n              vm.tempMsg.audioBlob = audioBlob;\n              vm.tempMsg.audioUrl = audioUrl;\n              if (vm.autoSend) {\n                vm.sendMsg();\n              }\n            });\n          });\n        },\n        end: function () {\n          this.mediaRecorder.stop();\n          vm.msgRecording = false;\n        }\n      };\n    },\n    inputRecognition() {\n      const vm = this;\n      //辨識初始設定\n      const SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;\n      const SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;\n      const SpeechRecognitionEvent = SpeechRecognitionEvent || webkitSpeechRecognitionEvent;\n      const recognition = new SpeechRecognition();\n      recognition.continuous = true; // 連續辨識\n      recognition.interimResults = true; // 是否要輸出中間結果\n      recognition.lang = this.inputLang;\n      //錄音初始設定\n      const record = this.recordFn();\n      // 開始辨識及錄音\n      recognition.start();\n      recognition.onstart = function () {\n        record.start();\n        vm.msgRecognizing = true; // 設定為辨識中\n      };\n      recognition.onend = function () {\n        // 辨識完成\n        record.end();\n        vm.commandRecognition();\n        vm.msgRecognizing = false; // 設定為「非辨識中」\n      };\n      recognition.onresult = function (event) {\n        let interim_transcript = ''; // 中間結果\n        let final_transcript = '';\n        for (let i = event.resultIndex; i < event.results.length; ++i) {\n          // 對於每一個辨識結果\n          if (event.results[i].isFinal) {\n            // 如果是最終結果\n            final_transcript += event.results[i][0].transcript; // 將其加入最終結果中\n            vm.tempMsg.text = final_transcript;\n            recognition.stop();\n          } else {\n            // 否則\n            interim_transcript += event.results[i][0].transcript; // 將其加入中間結果中\n            vm.tempMsg.text = interim_transcript;\n          }\n        }\n      };\n    },\n    commandRecognition() {\n      const vm = this;\n      const SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;\n      const SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;\n      const SpeechRecognitionEvent = SpeechRecognitionEvent || webkitSpeechRecognitionEvent;\n      const commands = ['switch to'];\n      var grammar =\n        '#JSGF V1.0; grammar commands; public <commands> = ' + commands.join(' | ') + ' ;';\n      const recognition = new SpeechRecognition();\n      const speechRecognitionList = new SpeechGrammarList();\n      speechRecognitionList.addFromString(grammar, 1);\n      recognition.grammars = speechRecognitionList;\n      recognition.lang = 'en-US';\n      recognition.continuous = true; // 連續辨識\n      recognition.interimResults = false; // 是否要輸出中間結果\n      recognition.maxAlternatives = 1;\n      recognition.start();\n      recognition.onend = function () {\n        console.log('commandRecognition End');\n        setTimeout(() => {\n          if (!vm.msgRecording) {\n            console.log('commandRecognition');\n            vm.commandRecognition();\n          }\n        }, 50);\n      };\n      recognition.onresult = function (event) {\n        //不在錄音的情況下執行\n        if (!vm.msgRecognizing) {\n          const last = event.results.length - 1;\n          const command = event.results[last][0].transcript;\n          console.log(command.toLowerCase() + ' Confidence: ' + event.results[0][0].confidence);\n          if (command.toLowerCase().includes('switch to')) {\n            switchGroup(command.toLowerCase());\n          }\n        }\n      };\n      function switchGroup(command) {\n        let group;\n        if (command.includes('channel')) {\n          const inputGroup = command.replace('switch to channel', '').trim();\n          const index = parseInt(inputGroup, 10) - 1;\n          group = vm.groups[index];\n        } else {\n          const inputGroup = command.replace('switch to', '').trim();\n          if (inputGroup == vm.currentGroup.title) return;\n          group = vm.groups.find(item => item.title.toLowerCase() == inputGroup);\n        }\n        if (group && vm.currentGroup !== group) {\n          vm.currentGroup = group;\n        }\n      }\n    },\n    sendMsg(e, msg = this.tempMsg) {\n      if (!msg.text.length && !msg.audioUrl) return;\n      msg.timestamp = Date.now();\n      this.currentGroup.messages.push(msg);\n      this.tempMsg = {\n        text: null,\n        audioBlob: null,\n        audioUrl: null,\n        audioDuration: null\n      };\n    }\n  },\n  created() {\n    this.currentGroup = this.groups[0];\n    this.commandRecognition();\n  },\n  filters: {\n    timeFormat(timestamp) {\n      let date = new Date(timestamp);\n      let year = date.getFullYear();\n      let month = date.getMonth() + 1;\n      let day = date.getDate();\n      let hours = '0' + date.getHours();\n      let minutes = '0' + date.getMinutes();\n      let seconds = '0' + date.getSeconds();\n      return `${year}-${month}-${day} ${hours.substr(-2)}:${minutes.substr(-2)}:${seconds.substr(\n        -2\n      )}`;\n    }\n  }\n});\n"]}