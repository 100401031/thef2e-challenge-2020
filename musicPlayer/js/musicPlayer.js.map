{"version":3,"sources":["musicPlayer/js/musicPlayer.js"],"names":["tag","document","createElement","src","parentNode","insertBefore","firstScriptTag","vm","window","player","YT","Player","onYouTubeIframeAPIReady","height","width","controls","videoId","playerVars","onPlayerReady","onPlayerStateChange","$","Vue","el","currentPlayList","playingPlayList","currentSong","data","isCued","isPlaying","isPause","isBuffering","isEnded","currentTime","durationTime","loadedFraction","playingTimer","body","clientWidth","loadingTimer","sidebarHide","playerState","screenWidth","listPauseHover","volume","preVolume","randomMode","randomPreviousSong","favoritePlaylist","watch","newVal","this","PlayerState","CUED","PLAYING","PAUSED","ENDED","BUFFERING","playNextSong","setPlayerTimer","getDuration","oldVal","clearPlayerTimer","computed","cdRotate","parseFloat","loadingPercentage","toFixed","currentPlayListSong","song","isCurrentPlayFavorite","some","item","_this","methods","getVolume","setVolume","e","target","value","muteVolume","event","key","playList","setCurrentSong","songObj","playCurrentSong","_this2","setCdCoverImg","coverImgFileName","retryPlay","setInterval","clearInterval","push","playRandomSong","currentIndex","indexOf","length","playPreviousSong","preSongArrayLength","lastSongIndex","splice","currentListLength","floor","randomIndex","randomSongIndex","toggleRandomMode","imageName","getElementById","style","backgroundImage","_this3","getCurrentTime","getVideoLoadedFraction","buffer","handleCollapse","setTimeout","_this4","changeCurrentTime","seekTo","handlePlayBtn","clearTimeout","index","alreadyInList","find","playVideo","favoriteList","favoriteListJson","JSON","stringify","localStorage","setItem","isListSongFavorite","filters","time","sec","parseInt","concat","created","_this5","localFavoriteList","timeFormat","getItem","getJSON","setCurrentPlaylist","Object","keys"],"mappings":"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","file":"musicPlayer.js","sourcesContent":["// This code loads the IFrame Player API code asynchronously.\nvar tag = document.createElement('script');\ntag.src = 'https://www.youtube.com/iframe_api';\nvar firstScriptTag = document.getElementsByTagName('script')[0];\nfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\nvar player = null;\nwindow.onYouTubeIframeAPIReady = function onYouTubeIframeAPIReady() {\n  player = new YT.Player('yt-iframe-player', {\n    height: '0',\n    width: '0',\n    videoId: 'H7pOrQEnc3c',\n    playerVars: { controls: 0 },\n    events: {\n      onReady: vm.onPlayerReady,\n      onStateChange: vm.onPlayerStateChange,\n    },\n  });\n};\n\nvar vm;\n$(function () {\n  vm = new Vue({\n    el: '#app',\n    data: {\n      currentPlayList: {},\n      playingPlayList: null,\n      currentSong: null,\n      isCued: false,\n      isPlaying: false,\n      isPause: false,\n      isBuffering: false,\n      isEnded: false,\n      currentTime: 0,\n      durationTime: 0,\n      loadedFraction: 0,\n      playingTimer: null,\n      loadingTimer: null,\n      sidebarHide: false,\n      playerState: null,\n      screenWidth: document.body.clientWidth,\n      listPauseHover: false,\n      volume: 50,\n      preVolume: null,\n      randomMode: false,\n      randomPreviousSong: [],\n      favoriteList: [],\n      favoritePlaylist: {\n        title: '我的最愛',\n        song: [],\n      },\n      playList: {\n        // '#pl-1': {\n        //   title: '周杰倫金曲',\n        //   song: [\n        //     {\n        //       title: '蝸牛',\n        //       artist: '周杰倫',\n        //       album: '范特西',\n        //       videoId: 'H7pOrQEnc3c',\n        //       coverImgFileName: 'jay_chou.jpg'\n        //     },\n        //     {\n        //       title: '世界末日',\n        //       artist: '周杰倫',\n        //       album: '范特西',\n        //       videoId: 'NDFULbHgL6E',\n        //       coverImgFileName: 'jay_chou.jpg'\n        //     },\n        //     {\n        //       title: '晴天',\n        //       artist: '周杰倫',\n        //       album: '葉惠美',\n        //       videoId: 'DYptgVvkVLQ',\n        //       coverImgFileName: 'jay_chou.jpg'\n        //     }\n        //   ]\n        // },\n        // '#pl-2': {\n        //   title: '張震嶽精選',\n        //   song: [\n        //     {\n        //       title: '思念是一種病',\n        //       artist: '張震嶽',\n        //       album: 'OK',\n        //       videoId: '9ei1PUmDz98',\n        //       coverImgFileName: 'Ayal_Komod.png'\n        //     },\n        //     {\n        //       title: '愛我別走',\n        //       artist: '張震嶽',\n        //       album: '秘密基地',\n        //       videoId: 'zPeMFCDPgKE',\n        //       coverImgFileName: 'Ayal_Komod.png'\n        //     },\n        //     {\n        //       title: '自由',\n        //       artist: '張震嶽',\n        //       album: '秘密基地',\n        //       videoId: '_dsyAjwf620',\n        //       coverImgFileName: 'Ayal_Komod.png'\n        //     }\n        //   ]\n        // }\n      },\n    },\n    watch: {\n      playerState(newVal) {\n        this.isBuffering = false;\n        this.isEnded = false;\n        this.isCued = false;\n        if (newVal == YT.PlayerState.CUED) {\n          this.isCued = true;\n        } else if (newVal == YT.PlayerState.PLAYING) {\n          this.isPlaying = true;\n          this.isPause = false;\n        } else if (newVal == YT.PlayerState.PAUSED) {\n          this.isPause = true;\n          this.isPlaying = false;\n        } else if (newVal == YT.PlayerState.ENDED) {\n          this.isEnded = true;\n          this.playNextSong();\n        } else if (newVal == YT.PlayerState.BUFFERING) {\n          this.isBuffering = true;\n        } else {\n          this.isPause = false;\n          this.isPlaying = false;\n        }\n      },\n      isPlaying(newVal) {\n        if (newVal) {\n          this.setPlayerTimer();\n          this.durationTime = player.getDuration();\n        } else {\n          this.clearPlayerTimer();\n        }\n      },\n      playingPlayList(newVal, oldVal) {\n        if (newVal != oldVal) {\n          this.randomPreviousSong = [];\n        }\n      },\n    },\n    computed: {\n      cdRotate() {\n        return (this.isPlaying || this.isPause) && !this.isEnded;\n      },\n      playPercentage() {\n        return (\n          parseFloat((this.currentTime / this.durationTime).toFixed(4)) || 0\n        );\n      },\n      loadingPercentage() {\n        return parseFloat(this.loadedFraction.toFixed(3));\n      },\n      currentPlayListSong() {\n        return this.currentPlayList.song || [];\n      },\n      isCurrentPlayFavorite() {\n        if (this.currentSong)\n          return this.favoriteList.some(\n            (item) => item.videoId == this.currentSong.videoId\n          );\n        else return false;\n      },\n    },\n    methods: {\n      onPlayerReady() {\n        this.volume = player.getVolume();\n      },\n      setVolume(e) {\n        this.volume = e.target.value;\n        player.setVolume(this.volume);\n      },\n      muteVolume() {\n        if (this.volume > 0) {\n          this.preVolume = this.volume;\n          this.volume = 0;\n        } else if (this.volume < 1 && this.preVolume) {\n          this.volume = this.preVolume;\n          this.preVolume = null;\n        }\n        player.setVolume(this.volume);\n      },\n      onPlayerStateChange(event) {\n        this.playerState = event.data;\n      },\n      setCurrentPlaylist(key) {\n        if (key === 'favorite') {\n          this.currentPlayList = this.favoritePlaylist;\n          return;\n        }\n        this.currentPlayList = this.playList[key];\n      },\n      setCurrentSong(songObj) {\n        this.currentSong = songObj;\n        player.cueVideoById({\n          videoId: this.currentSong.videoId,\n        });\n\n        this.currentTime = 0;\n        this.durationTime = 0;\n        this.loadedFraction = 0;\n      },\n      playCurrentSong(songObj) {\n        this.setCurrentSong(songObj);\n        this.setCdCoverImg(songObj.coverImgFileName);\n        this.playingPlayList = this.currentPlayList;\n        let retryPlay = setInterval(() => {\n          if (this.playerState === 5) {\n            player.playVideo();\n            clearInterval(retryPlay);\n            retryPlay = null;\n          }\n        }, 250);\n      },\n      playNextSong() {\n        if (this.randomMode) {\n          //存取曾播放之歌曲讓使用者能播放上一首\n          this.randomPreviousSong.push(this.currentSong);\n          this.playRandomSong();\n          return;\n        }\n        //抓取現在索引值，確認是否為最後一首，處理true/false不同邏輯\n        const currentIndex = this.currentPlayList.song.indexOf(\n          this.currentSong\n        );\n        const currentListLength = this.currentPlayList.song.length;\n        if (currentIndex + 1 === currentListLength) {\n          //若為最後一首，則播放清單第一首\n          this.playCurrentSong(this.currentPlayList.song[0]);\n        } else {\n          this.playCurrentSong(this.currentPlayList.song[currentIndex + 1]);\n        }\n      },\n      playPreviousSong() {\n        if (this.randomMode) {\n          //若隨機播放紀錄無上一首則播放目前歌曲\n          const preSongArrayLength = this.randomPreviousSong.length;\n          if (preSongArrayLength === 0) {\n            player.seekTo(0);\n          } else {\n            //播放隨機播放紀錄上一首，並從陣列中將移除\n            this.playCurrentSong(\n              this.randomPreviousSong[preSongArrayLength - 1]\n            );\n            this.randomPreviousSong.splice(-1, 1);\n          }\n          return;\n        }\n        //抓取現在索引值，確認是否為第一首，處理true/false不同邏輯，並播放下一索引歌曲\n        const currentIndex = this.currentPlayList.song.indexOf(\n          this.currentSong\n        );\n        const lastSongIndex = this.currentPlayList.song.length - 1;\n        //若為第一首\n        if (currentIndex === 0) {\n          this.playCurrentSong(this.currentPlayList.song[lastSongIndex]);\n        } else {\n          this.playCurrentSong(this.currentPlayList.song[currentIndex - 1]);\n        }\n        // playCurrentSong();\n      },\n      playRandomSong() {\n        const currentIndex = this.currentPlayList.song.indexOf(\n          this.currentSong\n        );\n        const currentListLength = this.currentPlayList.song.length;\n        const randomSongIndex = () => {\n          let randomIndex = Math.floor(Math.random() * currentListLength);\n          if (randomIndex === currentIndex) return randomSongIndex();\n          else return randomIndex;\n        };\n        this.playCurrentSong(this.currentPlayList.song[randomSongIndex()]);\n      },\n      toggleRandomMode() {\n        this.randomMode = !this.randomMode;\n        this.randomPreviousSong = [];\n      },\n      setCdCoverImg(imageName) {\n        const style = `url('./image/albumCover/${imageName}')`;\n        document.getElementById('cd').style.backgroundImage = style;\n      },\n      setPlayerTimer() {\n        this.currentTime = player.getCurrentTime();\n        this.loadedFraction = player.getVideoLoadedFraction();\n        this.playingTimer = setInterval(() => {\n          if (!this.buffer) {\n            this.currentTime = player.getCurrentTime();\n          }\n        }, 1000 / 29);\n        this.loadingTimer = setInterval(() => {\n          this.loadedFraction = player.getVideoLoadedFraction();\n        }, 5000);\n      },\n      clearPlayerTimer() {\n        clearInterval(this.playingTimer);\n        clearInterval(this.loadingTimer);\n      },\n      handleCollapse() {\n        this.sidebarHide = !this.sidebarHide;\n      },\n      changeCurrentTime(e) {\n        this.buffer = setTimeout(() => {\n          clearTimeout(this.buffer);\n          this.buffer = null;\n        }, 1000);\n        this.currentTime = e.target.value;\n        player.seekTo(e.target.value);\n      },\n      handlePlayBtn() {\n        if (this.isPause || this.isEnded) {\n          player.playVideo();\n        } else {\n          player.pauseVideo();\n        }\n      },\n      addToFavorite(songObj) {\n        const alreadyInList = this.favoriteList.find(\n          (item) => item.videoId == songObj.videoId\n        );\n        if (alreadyInList) {\n          const index = this.favoriteList.indexOf(alreadyInList);\n          this.favoriteList.splice(index, 1);\n        } else {\n          this.favoriteList.push(songObj);\n        }\n        const favoriteListJson = JSON.stringify(this.favoriteList);\n        localStorage.setItem('favoriteList', favoriteListJson);\n      },\n      isListSongFavorite(songObj) {\n        return this.favoriteList.some(\n          (item) => item.videoId == songObj.videoId\n        );\n      },\n    },\n    filters: {\n      timeFormat(time) {\n        //將秒數轉換成mm:ss格式字串並回傳\n        let min = parseInt(time / 60) || 0;\n        let sec = parseInt(time) % 60 || 0;\n        return `${min}:${sec > 9 ? sec : '0' + sec}`;\n      },\n    },\n    created() {\n      const localFavoriteList =\n        JSON.parse(localStorage.getItem('favoriteList')) || [];\n      this.favoriteList = localFavoriteList;\n      this.favoritePlaylist.song = this.favoriteList;\n      $.getJSON('./json/playlist.json', (data) => {\n        this.playList = data;\n        this.setCurrentPlaylist(Object.keys(this.playList)[0]);\n      });\n    },\n  });\n});\n"]}